<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nishinohi</title>
    <link>https://nishinohi.github.io/</link>
    <description>Recent content on nishinohi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 25 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nishinohi.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MATAGEEK</title>
      <link>https://nishinohi.github.io/blog/matageek/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/matageek/</guid>
      <description>MATAGEEKって何？ 一言でいうとBLEメッシュネットワークを利用した狩猟用わなの検知及び通知システムです。
わな猟って大変ですよね 狩猟といえば猟銃のイメージがありますが、わな猟も重要な方法の一つです。しかし仕掛けたわなは原則毎日見回りを実施する必要があります。1（非狩猟鳥獣がかからないように、手負いの動物をつくらないように等）また獲物がかかった場合もできる限り早急に対処できた方が理想的です。 ということでイメージとしては以下のようなものが出来上がれば色々便利そうです。 わなが作動したときに通知を送信するようなものであれば SORACOM LTE-M Button などの市販のIoTモジュールで割と事足ります。ですがわな猟は捕獲率を上げるために動物の通りそうな箇所にわなを複数個仕掛けるのが一般的で、それぞれのわなにIoTモジュールを配置するのは費用的に個人で可能なレベルとは少し言いにくいです。（ピンきりですがLTE回線等が使用できるモジュールは安くても1万円はするので）
メッシュネットワーク 上記の問題を解決するために、今回はBluetoothを用いたメッシュネットワークを利用します。市販品でも親機（LTE回線が使用できるもの）と子機（親機と短距離通信ができるもの）でネットワークを作るIoTモジュールもありますが、狩猟用に利用できそうなものではスター型のネットワークのものしか調べた限りなさそうでした。（あったら教えてほしいです） ここでBluetoothに詳しい人であれば「あ〜Bluetooth5.0のBluetooth Meshね」と思われたでしょう。しかしBluetoothにもう少し詳しい人であれば表題に違和感を覚えたはずです。Bluetooth 5.0で追加されたBluetooth MeshはBluetooth Low Energy（BLE）に基づいてはいますが低消費電力ソリューションではありません。 簡単に説明するとBluetooth Meshは接続を維持するために仕様上無線をオフにすることができません。そしてBluetooth機器における電力消費の主たるものは無線です。一部のノード（メッシュ内の一つのBluetoothデバイスのこと）を低消費電力モード（Low Powerモード）で稼働させることは仕様的にも可能ですが、Low Powerモードと通信するノードはLow Powerモードにすることができません。つまり、全てのノードを低消費電力で稼働させることは仕様上不可能です。 となると表題の低消費電力狩猟用モジュールとは一体どういうことなのとなります。実は今回のメッシュネットワークはBluetooth 4のBLE機能のみでメッシュネットワークを形成することで低消費電力を実現しています。
FruityMesh FruityMesh というBluetooth 4のBLEのみでメッシュネットワーク作成しているPJがあります。このPJについて色々説明したいのですがそれだけで記事3つくらいの分量になりそうなので今回は詳細な説明は省きます。このPJでは実際に消費電力を計測したところ電力消費の高いスキャニング（デバイスを探す機能）でも1mA以下でした。またメッシュ内のノードがある個数まで達したときスキャニングを停止することが可能であれば、ノードの個数にもよりますがおおよそ150-250µAで稼働させることができるようです。今回はこれに色々手を加えつつ、スマホからもノードの情報を取得したり操作できるようにします。偉大なる先人に感謝🙏
構成 狩猟用わなモジュール構成 メッシュ内に最低でも一つゲートウェイ機能（LTE回線が利用できる）があるノードを含め、任意の数のノードでメッシュネットワークを形成します。ノードを設置するフローは以下のようになります。
スマートフォンなどからノードに接続しノードを任意のネットワークに登録（エンロール）する メッシュネットワーク内のノードを設置モードにしてわなを仕掛けた場所に設置する メッシュネットワーク内のノードを探知モードにする ノードを任意のネットワークに登録（エンロール）する ノードは特定のノードとのみメッシュネットワークを作成する必要があります。（そうでないと赤の他人が近くに設置した場合相互に接続してしまいます）そのためノードには以下の２つの情報を付与することで特定のネットワークに所属させることができます。（これを登録（エンロール）と呼んでいます）これはBluetooth MeshでのProvisioningに対応していると考えてもらっていいと思います。（参考： Provisioning a Bluetooth Mesh Network ）
ネットワークID ネットワークキー ネットワークIDは自身が所属すべきネットワークの識別ID、ネットワークキーは16byteで構成される対象のネットワークに接続するための共通鍵です。これにより例えば自分と他人がネットワークIDを同じ1としてエンロールしてもネットワークキーが異なれば接続されません。この機能はFruityMeshに実装されている標準機能で実現できますが、現状の実装だとノードを個別に有線（UART等）でエンロールする必要があるため以下のような機能を追加して処理が一度で済むようにしています。
ノードは初期状態ではデフォルトのネットワークIDとネットワークキーで起動し、同じく初期状態のノード同士でメッシュネットワークを作成する 初期状態のノードにスマートフォンで接続し、ネットワークIDとネットワークキーをメッシュネットワーク内のノードに送信する ただしこの機能は初期状態のノードは同じく初期状態のノードと無差別にメッシュネットワークを形成するため、登録作業は自身の所持しているノード以外のノードが存在しない環境で実施する必要があります。
設置モードと探知モード モードの切り替え機能は狩猟用モジュールとして追加した機能の一つです。これらのモードの違いは主にBluetoothのスキャニングの頻度であり、つまるところ消費電力の違いです。設置モードはスキャニングの頻度を高め電力を多めに消費するかわりに他のノードが探しやすくなります。逆に探知モードのノードは現在の接続を維持しつつ他のノードを探さなくなるかわりに消費電力を大幅に抑えることが可能です。 猟場にわなを設置する場合は設置モードに設定し、わな設置後期待通りのメッシュネットワークが形成されていれば探知モードに切り替えて長時間稼働させるという使用方法を想定しています。
インフラ構成 メッシュ内の何れかのノードが作動した場合ユーザーに通知を送信します。図ではブラウザで情報を見れるような記述がありますが今回そこは説明しませんというかまだできてません😂
後述するSORACOM BEAMによる暗号化を利用するための証明書や秘密鍵の発行はAWS IoTを利用しています。これでSIM毎に個別の暗号化ができるのでもしこの仕組みを利用したい方がいればそれぞれでセキュリティを担保できます。
暗号化 簡単では無いですが避けては通れないのが暗号化です。今回は2種類の通信でそれぞれに暗号化が必要です。
わなの作動情報をAWS IoTへ送信する際の暗号化 メッシュネットワーク内の通信の暗号化 メッシュネットワーク内の通信はローカルネットワークなので、スニッフィングするにはわなが設置されている場所まで赴く必要があります。ですので正直そこまで気にしなくてもという気もしますがFruityMeshにすでに暗号化の機能が実装されているのでありがたく利用します。
わなの作動情報の暗号化 主にIoTなどで利用されるMQTTプロトコルでわなの作動状況を送信しますが、そのままでは何も暗号化されていないのでMQTTSを使用したいところです。しかしMQTTSを使用するには一般的なIoTデバイスの乏しいリソース（今回は64Mhz、256KB SRAM程度のものを使用します）では少々辛い部分があります。そこで活躍してくれるのが SORACOM BEAM です。SORACOM BEAMはIoTデバイスにかかる暗号化等の高負荷処理や接続先の設定をクラウドにオフロードできるサービスです。 デバイス側は下図のようにキャリアの閉域網からBeamのエンドポイントへ暗号化されていないパケットを送信するだけです。その後Beam側が受信したパケットを指定された暗号化方式で暗号化して指定された送信先へパケットを転送してくれます。 メッシュネットワーク内での通信の暗号化 Bluetooth 4では ペアリングとボンディング による暗号化が仕様として策定されていますが、FruityMeshでは独自の暗号化を利用しています。GAP（Bluetoothでの通信の基本的な規約のようなもので暗号化もここで規定されています）の非暗号化通信にアプリケーション層で独自の暗号化を実施しています。（この仕様は異なるデバイスでの相互運用を目的としているようです）暗号化の方式は簡単に言うと共通鍵暗号方式です。ノード間でコネクションを確立した際、一定のタイムアウト内で乱数を共通鍵で暗号化したパケットを交換することでお互いを認証しています。</description>
    </item>
    
    <item>
      <title>コンパクトなGatewayを作る</title>
      <link>https://nishinohi.github.io/blog/compact-gateway/</link>
      <pubDate>Mon, 25 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/compact-gateway/</guid>
      <description>何を作ったのか 以前に作成した3G通信モジュールを参考に、マイコンとLTEモジュールを組合わせたコンパクトなGatewayを作成しました。
OSH 参考にする製品 まずはOSHから回路図をもらってきます。今回はSORACOM認定デバイスでもありSeeedから提供されている Wio LTEの回路図 を参考にします。Wio LTEで実装されているLTE用のEC21の仕様書の参考回路図などから自分で回路を組んでもいいのですが、最終的にPCBAをSeeedに発注する場合Seeedが提供している部品リストを利用したほうが安価で納品も速いです。なお、後述しますが最終的に今回は技適対応済みのEC25-Jを実装することになりました。
回路図を見る 前回と同様に通信以外の不要な回路を削除します。Wio LTEにはSTM32F4というマイコンが搭載されていますが、今回はWiFi機能もつけたかったためマイコン部分を ESP32 に置き換えます。また、Wio LTEは3層実装でしたが部品点数を減らせば2層に収まりそうだったので2層で実装にします。
改修作業 改修内容 以下が今回の改修を行った回路図と配線図です。通信機能のみが必要なので上図の回路図よりかなり部品点数が減りました。マイコンもESP32に交換済みです。WiFi用のアンテナが干渉されないように基盤の外にでるように配置しましたが、電波関係の知識は全く無いのでどのような配置がアンテナにとってよい配置なのかはわかっていません。
完成品 とりあえず届いた完成品を見てみます。いかにも無理やりつけた配線が飛び出していますが、これは私がLTEモジュールの起動用のPINを少しいじる必要があったので付け足しました。
トラブル どうもSeeedが提供していたSIMカードホルダーのEagle用のライブラリに不備があったようでそのまま配線するとSIMを正しく読み取れませんでした。なので一度SIMカードホルダーを半田を溶かして無理やり引き剥がし配線をやり直しました。見た目が残念なことになりましたがこれで正しく動作したので一安心です。ちなみにSeeed側からは謝罪を兼ねてSeeed内で使用できるクーポン券が送られてきました。
EC25-Jは特別な入手経路 実は今回LTE用のモジュールとして実装しているEC25-Jですが、本来技適マークが印字されているものは個人では注文できません。Seeed主催の勉強会で登壇した際に知り合ったSeeedのエンジニア兼マーケティング担当の方に相談したところ、EC25-Jなら実装できるように手配すると言われ今回このモジュールが完成しました。本当にありがとうございました、この場を借りてお礼申し上げます。</description>
    </item>
    
    <item>
      <title>コンパクトな3G通信モジュールを作る</title>
      <link>https://nishinohi.github.io/blog/compact-3g-module/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/compact-3g-module/</guid>
      <description>何を作ったのか GPS機能付きの3G通信モジュールです。HWの設計に関する知識を持ち合わせていないので0からHWを設計したわけではなく、OSHで提供されている多機能な3Gモジュールを改修してコンパクトなモジュールを再設計・製造したという話です。
なぜ作ったのか これを作った当時（2016年くらい）、携帯電波網を利用できる比較的安いArduino向けのモジュールがありませんでした。当時はマイコンによる3G通信で安価なホビー向けの環境はRaspberry Pi ZERO + 3Gドングル + SORACOM SIMの選択肢が一般的でした。そんな中「USBドングルでかい、Raspberry Pi ZERO意外とでかい、電源リソース苦しい、Arduino使いたい」という私の我儘を叶えられるモジュールはないかと奔走しましたが、そんな願ったり叶ったりなモノは見つからなかったため自作することにしました。
OSH（オープンソースハードウェア） Adafruitとの出会い 安い3Gモジュールが無いかとネットの海を彷徨っていると、OSH（OpenSourceHardware）で有名なAdafruit Industriesの Adafruit FONA 3G Cellular （以下Fona）という比較的安価（$79.95）なモジュールに出会いました。Arduinoで利用するためのライブラリも提供されています。いたれりつくせりです。しかし技適という壁が立ちはだかり、購入しても日本では使えません。 モジュール部分を技適対応すればよいのでは？ Fonaには3G通信用のモジュールにSIM5320が使用されていますが、特定のアンテナとセットで技適が取得されているSIM5320Jという日本向けのモジュールがありました。モジュールをこれに置き換えて自分で作成してしまえば日本で使用することが可能です。そしてAdafruitの製品は全てOSH。全ての回路図が Eagle のデータ形式で公開されています。
改修内容 AdafruitのモジュールはSIM5320の様々な機能を利用するために多くの部品が実装されていますが、通信するだけであれば部品点数を減らせそうだったため以下のような回路に修正することにしました。
電話機能用のスピーカー回路削除 イヤホンジャック削除 バッテリーは電池駆動を想定したのでリチウム電池用の充放電管理回路を削除 回路図に立ち向かう 自分の電気回路の知識レベル 電子工作の知識は全てインターネットとYouTuberから得ましたがそれでも何とかなったので、以降の話も特に電気回路の知識がなくても理解できると思います。
OSH Adafruitに感謝しながら以下のリポジトリをクローンしましょう。ちなみに fritzing用のライブラリ も公開しているようです（fritzing形式のFONAの回路図はありません）。
FONA回路図（Eagle） FONAライブラリ 回路図をみる Eagle をインストールしていない場合、まずインストールしましょう。思った以上に複雑でないことが分かると思います。それぞれの機能毎に回路図を分けて記述してあるので読みやすいですね。配線図は一見複雑なように見えますが、実際の配線は回路図からある程度Eagleの機能で自動生成できます。
不要な回路を削る 前編で触れましたが、3G通信以外の機能が不要であれば以下の回路は不要なので今回は削除します。
電話機能用のスピーカー イヤホンジャック バッテリーは電池駆動を想定したのでリチウム電池用の充放電管理回路 また、FONA自体はArduinoでの利用を想定しているためSIM5320からの3.3V信号をレベルシフター（回路図の「LEVEL SHIFTING」の箇所の三角形の部品）で5V信号に変換しています。しかし、私はESP8266での利用を想定しており、3.3V信号がそのまま利用できるのでレベルシフターも不要です。よって、回路図の以下のものは不要になります。
3.5MM HEADPHONE/MIC LEVEL SHIFTING LIPO CHARGER AUDIO FILTERING それらを削除した後の回路図、配線図は以下のようになります。グッとシンプルかつ簡単になりましたね。アンテナのコネクタを小さくしたかったので、3G通信アンテナ用のコネクタをSMAからUFLに変更しましたがこれはどっちでもいいです（変換コネクタもあるので）。
改修後の回路図の詳細は下記のリンクを参照して下さい。
Adafruit-FONA-SIMCOM-3G-Breakout-PCB 発注する 基盤の設計が完了したら後は発注するだけです。発注先は Seeed です。 Fusion PCB というサービスは、基盤の製造だけでなく部品の実装までそこそこな価格で対応してもらえます。 今回の基盤は表面実装1台、基盤のみ5枚で$100ほどでした。FONAより$20程高くなっていますが単品の発注でここまで低価格に抑えられたのはすごいです。
発注までの細かい流れは以下の記事が大変参考になりました。また、Seeedの twitter は日本語対応OKで気さくに質問に答えてもらえます。</description>
    </item>
    
    <item>
      <title>小さく暮らし大きく開く</title>
      <link>https://nishinohi.github.io/blog/live-small-open-wide/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/live-small-open-wide/</guid>
      <description>Concept 開口部を居住者や内部空間の都合ではなく都市の風景を眺める歩行者のために設計する。居住者は連続的に変形するルーバーの形に合わせて都市の風景の一部として居住空間を演出する。
南堀江というコンパクトシティにおいて歴史的経緯のあるビルディングのファサードを失わずに歩行者のためのファサードを形成するとき、新たな都市の風景が生まれるかもしれない。
このルーバーは見る角度によって内部の見え方にグラデーションをかける装置になる。ルーバーは見る角度によって開口部となりなったり重なりあって壁面のようにも振舞う。
ルーバーの長さの変化により、周囲に見せたい空間(Public)、見られたくない空間(Private)の調整が可能なり、周囲を歩く人に対しグラデーションのある風景を作り出す。</description>
    </item>
    
    <item>
      <title>Nakanoshima Islandization</title>
      <link>https://nishinohi.github.io/blog/nakanoshima-islandization/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/nakanoshima-islandization/</guid>
      <description>Concept 大阪の中にありながら周囲を水で囲まれた中之島は水都大阪の要であり、水運を利用した様々な交易の中心であり文化の発祥地でもあった。だが、大規模な橋や幹線道路の整備、地下鉄の普及により中之島はその島としてのコンテクストを失いただの地続きの土地のように認識されている。
この美術館は中之島を文化の発祥地として再度「島化」する計画である。周囲を水で囲まれたその土地にはかつて水運を担った船が発着を繰り返し、訪れる人々に島という特別な場としての中之島を再認識させるだろう。</description>
    </item>
    
    <item>
      <title>パン屋の改修</title>
      <link>https://nishinohi.github.io/blog/sin-taro-pan/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/sin-taro-pan/</guid>
      <description>2013年（大学院2年）に阪急石橋駅にあるタローパンというパン屋の改修を設計施工（予算300万円）。地元の工務店の助けもあり新築ではないものの企画から設計、施工にも深く携わることができ、スケジュールもオーバーせず無事竣工しました。
壁は友人の協力の元全て漆喰で仕上げています。什器やイートインスペースのテーブル、椅子は地元の溶接工の方と協力して全て手作りで作成しました。 下図は現況写真とリニューアルにあたって私が作成したポスターです。
模型やCGでイメージを共有しながら、5つほど改修案を提案し施主に計画内容を決定してもらいました。 打ち合わせを通していく中で、施主は自分が思っている以上にこの改修を無事終えられるか不安に感じていることがわかりました。このとき改めて自分が今まで取り組んできた設計はあくまで課題でしかなく、施主に納得してもらうという重要なフェーズが未経験であることを実感しました。 何のリスクもなく進めていける課題と違い、実際に何かを作るには設計以外の様々な問題をこなす必要があることを改めて学ぶことができました。 改修後の様子 </description>
    </item>
    
    <item>
      <title>卒業設計</title>
      <link>https://nishinohi.github.io/blog/graduation-work/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/graduation-work/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>カイタイユウゴウ</title>
      <link>https://nishinohi.github.io/blog/kaitaiyugou/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/kaitaiyugou/</guid>
      <description>Concept 家族が多ければ多いほど必要な部屋数は増し様々な空間の大きさもより増大する。しかしながら、家族構成の変化に伴い家に求められる大きさはいずれ縮小する。
そのとき家は変化にどう対応できるだろうか。使われなくなった子供部屋、夫婦2人には少し大きいリビング、余った寝室。それらを外部に開放して家の内部面積を縮小し外部空間を拡大する。
このとき家々はその素材や構造を複雑に絡ませながらゆるやかに広がり周囲と交わり複雑な境界を作っていくだろう。</description>
    </item>
    
    <item>
      <title>陶芸家のための住宅</title>
      <link>https://nishinohi.github.io/blog/house-for-potter/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/house-for-potter/</guid>
      <description>Concept 陶芸家として生きるための住居の提案。</description>
    </item>
    
    <item>
      <title>about me</title>
      <link>https://nishinohi.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/about/</guid>
      <description>学歴 大阪大学工学部地球総合工学科卒業 大阪大学大学院工学研究科地球総合工学専攻修了 学生時代の活動 受賞歴 Diploma×KYOTO’12 -&amp;gt; 最優秀賞 関連書籍 卒業設計日本一決定戦2012 -&amp;gt; 予選通過 関連書籍 日本建築学会設計競技2012 -&amp;gt; 近畿支部入選 ユニオン造形デザイン賞2013 （審査員： 藤本壮介 ） -&amp;gt; 佳作 企画・設計・施工 タローパン改修（2014） 設計課題 アーカイブ 職歴 職務経歴書 業務外活動 Contributor FruityMesh メッシュノードのスマートフォンとの接続機能とアプリケーションUART（無線UART）機能 個人開発 FruityMeshAppUart メッシュノードへの無線ターミナル接続スマートフォンアプリ MATAGEEK 狩猟用わな検知システム（IoT） 技術記事 Qiita 勉強会（登壇） 大阪版IoT縛りの勉強会！IoTLT Osaka Vol.9 資料 IoT縛りの勉強会! IoTLT vol.42 資料 同人ハードウェア meetup ＃２ 資料 </description>
    </item>
    
    <item>
      <title>職務経歴書</title>
      <link>https://nishinohi.github.io/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/resume/</guid>
      <description>職務経歴概要 Webシステム 設計・要件定義：7年 プログラミング（フロントエンド）：8年 プログラミング（バックエンド）：1年 プロジェクトリーダー：6年 距離画像カメラを使った3Dセンシングシステム テスター：6ヶ月 プログラミング：1年 プログラミングスキル C, C++ 業務レベルの理解がある クラスベースの実装や複雑でないテンプレートが実装できる Java 業務レベルの理解がある ジェネリクスや複雑でないリフレクションなどが実装できる JavaScript 業務レベルの理解がある モジュールシステム（ES Modules）を理解している this、ホイスティングなどJS特有の言語仕様の基礎を理解している イベントバブリングなどブラウザ特有の仕様の基礎を理解している Typescript 業務レベルの理解がある 複雑な型定義を理解、実装できる Three.jsを利用した業務用3Dプログラミングを3年経験 HTML 業務レベルの理解がある セマンティクスを意識した実装の基礎を理解している アクセシビリティを意識した実装の基礎を理解している CSS 業務レベルの理解がある tailwindcssなどネイティブCSS以外のライブラリの使用経験がある レスポンシブレイアウトを理解し実装できる その他趣味で触った程度のもの Dart Kotlin Shell script その他のスキル Figma 応用的な操作が可能で画面設計レベルのものを作成可能 Adobe Illustrator 応用的な操作が可能で広告、提案書等に用いるものを作成可能 Adobe Photoshop 基本的な操作が可能で簡単な広告、提案書等に用いるものを作成可能 Sketch UP 応用的な操作が可能でプラグインの導入などにも知識があり活用できる Blender 基本的な操作が可能で複雑でないモデリング、簡単なUV展開、テクスチャ作成が可能 資格 普通自動車第一種運転免許：2009/5 応用情報技術者試験合格：2016/12 職務経歴 株式会社AzOne (2022/1〜) 自社サービス企画(2024/1〜) メンバー：2人 企画・技術選定・設計・実装 不動産向け総合案件管理システム（2023/10〜） メンバー：5人 PL 要件定義・画面設計・フロントエンド設計開発 Next.js, React, RadixUI, tailwindcss, SWR, React Hook Form 社内の有志メンバーへのスキルアップ研修(2023/8〜2023/12) メンバー：8人 スキルアップを目指すメンバーへの指導 社内向け星取表システム(2023/8〜2023/9) メンバー：1人 企画・技術選定・設計・実装 T3Stack 社内向けDiscord組み込み勤怠管理システム(2023/6〜2023/7) メンバー：3人 企画・技術選定・設計・実装・後進の育成 Node.</description>
    </item>
    
  </channel>
</rss>
