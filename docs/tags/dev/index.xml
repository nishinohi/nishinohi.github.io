<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dev on nishinohi</title>
    <link>https://nishinohi.github.io/tags/dev/</link>
    <description>Recent content in dev on nishinohi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 25 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nishinohi.github.io/tags/dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MATAGEEK</title>
      <link>https://nishinohi.github.io/blog/matageek/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/matageek/</guid>
      <description>MATAGEEKって何？ 一言でいうとBLEメッシュネットワークを利用した狩猟用わなの検知及び通知システムです。
わな猟って大変ですよね 狩猟といえば猟銃のイメージがありますが、わな猟も重要な方法の一つです。しかし仕掛けたわなは原則毎日見回りを実施する必要があります。1（非狩猟鳥獣がかからないように、手負いの動物をつくらないように等）また獲物がかかった場合もできる限り早急に対処できた方が理想的です。 ということでイメージとしては以下のようなものが出来上がれば色々便利そうです。 わなが作動したときに通知を送信するようなものであれば SORACOM LTE-M Button などの市販のIoTモジュールで割と事足ります。ですがわな猟は捕獲率を上げるために動物の通りそうな箇所にわなを複数個仕掛けるのが一般的で、それぞれのわなにIoTモジュールを配置するのは費用的に個人で可能なレベルとは少し言いにくいです。（ピンきりですがLTE回線等が使用できるモジュールは安くても1万円はするので）
メッシュネットワーク 上記の問題を解決するために、今回はBluetoothを用いたメッシュネットワークを利用します。市販品でも親機（LTE回線が使用できるもの）と子機（親機と短距離通信ができるもの）でネットワークを作るIoTモジュールもありますが、狩猟用に利用できそうなものではスター型のネットワークのものしか調べた限りなさそうでした。（あったら教えてほしいです） ここでBluetoothに詳しい人であれば「あ〜Bluetooth5.0のBluetooth Meshね」と思われたでしょう。しかしBluetoothにもう少し詳しい人であれば表題に違和感を覚えたはずです。Bluetooth 5.0で追加されたBluetooth MeshはBluetooth Low Energy（BLE）に基づいてはいますが低消費電力ソリューションではありません。 簡単に説明するとBluetooth Meshは接続を維持するために仕様上無線をオフにすることができません。そしてBluetooth機器における電力消費の主たるものは無線です。一部のノード（メッシュ内の一つのBluetoothデバイスのこと）を低消費電力モード（Low Powerモード）で稼働させることは仕様的にも可能ですが、Low Powerモードと通信するノードはLow Powerモードにすることができません。つまり、全てのノードを低消費電力で稼働させることは仕様上不可能です。 となると表題の低消費電力狩猟用モジュールとは一体どういうことなのとなります。実は今回のメッシュネットワークはBluetooth 4のBLE機能のみでメッシュネットワークを形成することで低消費電力を実現しています。
FruityMesh FruityMesh というBluetooth 4のBLEのみでメッシュネットワーク作成しているPJがあります。このPJについて色々説明したいのですがそれだけで記事3つくらいの分量になりそうなので今回は詳細な説明は省きます。このPJでは実際に消費電力を計測したところ電力消費の高いスキャニング（デバイスを探す機能）でも1mA以下でした。またメッシュ内のノードがある個数まで達したときスキャニングを停止することが可能であれば、ノードの個数にもよりますがおおよそ150-250µAで稼働させることができるようです。今回はこれに色々手を加えつつ、スマホからもノードの情報を取得したり操作できるようにします。偉大なる先人に感謝🙏
構成 狩猟用わなモジュール構成 メッシュ内に最低でも一つゲートウェイ機能（LTE回線が利用できる）があるノードを含め、任意の数のノードでメッシュネットワークを形成します。ノードを設置するフローは以下のようになります。
 スマートフォンなどからノードに接続しノードを任意のネットワークに登録（エンロール）する メッシュネットワーク内のノードを設置モードにしてわなを仕掛けた場所に設置する メッシュネットワーク内のノードを探知モードにする  ノードを任意のネットワークに登録（エンロール）する ノードは特定のノードとのみメッシュネットワークを作成する必要があります。（そうでないと赤の他人が近くに設置した場合相互に接続してしまいます）そのためノードには以下の２つの情報を付与することで特定のネットワークに所属させることができます。（これを登録（エンロール）と呼んでいます）これはBluetooth MeshでのProvisioningに対応していると考えてもらっていいと思います。（参考： Provisioning a Bluetooth Mesh Network ）
 ネットワークID ネットワークキー  ネットワークIDは自身が所属すべきネットワークの識別ID、ネットワークキーは16byteで構成される対象のネットワークに接続するための共通鍵です。これにより例えば自分と他人がネットワークIDを同じ1としてエンロールしてもネットワークキーが異なれば接続されません。この機能はFruityMeshに実装されている標準機能で実現できますが、現状の実装だとノードを個別に有線（UART等）でエンロールする必要があるため以下のような機能を追加して処理が一度で済むようにしています。
 ノードは初期状態ではデフォルトのネットワークIDとネットワークキーで起動し、同じく初期状態のノード同士でメッシュネットワークを作成する 初期状態のノードにスマートフォンで接続し、ネットワークIDとネットワークキーをメッシュネットワーク内のノードに送信する  ただしこの機能は初期状態のノードは同じく初期状態のノードと無差別にメッシュネットワークを形成するため、登録作業は自身の所持しているノード以外のノードが存在しない環境で実施する必要があります。
設置モードと探知モード モードの切り替え機能は狩猟用モジュールとして追加した機能の一つです。これらのモードの違いは主にBluetoothのスキャニングの頻度であり、つまるところ消費電力の違いです。設置モードはスキャニングの頻度を高め電力を多めに消費するかわりに他のノードが探しやすくなります。逆に探知モードのノードは現在の接続を維持しつつ他のノードを探さなくなるかわりに消費電力を大幅に抑えることが可能です。 猟場にわなを設置する場合は設置モードに設定し、わな設置後期待通りのメッシュネットワークが形成されていれば探知モードに切り替えて長時間稼働させるという使用方法を想定しています。
インフラ構成 メッシュ内の何れかのノードが作動した場合ユーザーに通知を送信します。図ではブラウザで情報を見れるような記述がありますが今回そこは説明しませんというかまだできてません😂
後述するSORACOM BEAMによる暗号化を利用するための証明書や秘密鍵の発行はAWS IoTを利用しています。これでSIM毎に個別の暗号化ができるのでもしこの仕組みを利用したい方がいればそれぞれでセキュリティを担保できます。
暗号化 簡単では無いですが避けては通れないのが暗号化です。今回は2種類の通信でそれぞれに暗号化が必要です。
 わなの作動情報をAWS IoTへ送信する際の暗号化 メッシュネットワーク内の通信の暗号化  メッシュネットワーク内の通信はローカルネットワークなので、スニッフィングするにはわなが設置されている場所まで赴く必要があります。ですので正直そこまで気にしなくてもという気もしますがFruityMeshにすでに暗号化の機能が実装されているのでありがたく利用します。</description>
    </item>
    
    <item>
      <title>WiFi・GPS機能付き3Gモジュールを作る</title>
      <link>https://nishinohi.github.io/blog/hardware/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nishinohi.github.io/blog/hardware/</guid>
      <description>何を作ったのか WiFi・GPS機能付きの3G通信モジュールです。ただ、HWの設計に関する知識を持ち合わせていないので、0からHWを設計したわけではなく、WiFi機能があるモジュール（ESP8266）と、3G通信、GPS機能のあるモジュール（SIM5320J）を組み合わせたモジュールを作ったという話です。（作ったと言うのだろうか？）
なぜ作ったのか これを作った当時（2016年くらい）、携帯電波網を利用できる比較的安いArduino向けのモジュールがありませんでした。当時はマイコンによる3G通信で安価なホビー向けの環境は「Raspberry Pi ZERO + 3Gドングル + SORACOM SIM」の選択肢が一般的でした。そんな中「USBドングルでかい、Raspberry Pi ZERO意外とでかい、電源リソース苦しい、Arduino使いたい」という私の我儘を叶えられるモジュールはないかと奔走しましたが、そんな願ったり叶ったりなモノは見つかりませんでした。SORACOMというIoT界の頼れる兄貴が次々と便利な仕組みを作ってくれている中、何とかその波に乗りたいという思いの元、モジュールの自作に踏み切りました。
オープンソースハードウェアに感謝 Adafruitとの運命の出会い 安い3Gモジュールが無いかとネットの海を彷徨っていると、OSH（OpenSourceHardware）で有名なAdafruit Industriesの Adafruit FONA 3G Cellular （以下Fona）という比較的安価（$79.95）なモジュールに出会いました。Arduinoで利用するためのライブラリも提供されています。いたれりつくせりです。しかし技適という壁が立ちはだかり、購入しても日本では使えません。 FONA  モジュール部分を技適対応すればよいのでは？ Fonaには3G通信用のモジュールに「SIM5320」が使用されていますが（画像のものはアメリカ向けのSIM5320A）、特定のアンテナとセットで技適が取得されている「SIM5320J」という日本向けのモジュールがありました。モジュールをこれに置き換えて自分で作成してしまえば、日本で使用することが可能です。そしてAdafruitの製品は全てOSH。全ての回路図が Eagle （基板設計用ソフト）のデータ形式で公開されています。自分で作ってしまっても構わないのだろう？と言わんばかりです。
改修内容 FonaはSIM5320の機能を余すことなく使い切るために必要な全ての部品が乗っていました。しかし、3G通信するだけであれば部品点数がグッと減らせそうだったため、以下のような回路に修正することにしました。
 電話機能用のスピーカー回路削除 イヤホンジャック削除 バッテリーは電池駆動を想定したのでリチウム電池用の充放電管理回路を削除  後半に続く Qiita初投稿のため、画像のアップロード上限が2MBしかなく、画像を用いた説明が全然できないので一旦ここで区切ります。後編に実際の制作過程を記載します。 後半作成しました。 こちら からどうぞ。
ちなみに GPSとWiFiはついてないですが、 WioLTE という、もう手軽な携帯通信モジュールは全部こいつで良いんじゃない？的なベストプロダクトが Seeed さんから提供されています。皆さんこれを使いましょう。ありがとうSeeedさん！ WioLTE  </description>
    </item>
    
  </channel>
</rss>
